version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: givc-backend
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://givc:${POSTGRES_PASSWORD:-givc_pass}@postgres:5432/givc_production
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_pass}@redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - givc-network

  # Frontend Web Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: givc-frontend
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=http://localhost:8000
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health.html"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - givc-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: givc-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=givc_production
      - POSTGRES_USER=givc
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-givc_pass}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U givc"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - givc-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: givc-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_pass}
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - givc-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: givc-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - givc-network

volumes:
  postgres-data:
  redis-data:

networks:
  givc-network:
    driver: bridge
